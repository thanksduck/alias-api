// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: payments.sql

package q

import (
	"context"
	"time"
)

const createCredit = `-- name: CreateCredit :one
INSERT INTO credits (user_id, balance, is_active)
VALUES ($1, $2, true)
RETURNING id
`

type CreateCreditParams struct {
	UserID  int64 `json:"userId"`
	Balance int64 `json:"balance"`
}

func (q *Queries) CreateCredit(ctx context.Context, arg *CreateCreditParams) (int64, error) {
	row := q.db.QueryRow(ctx, createCredit, arg.UserID, arg.Balance)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createSubscription = `-- name: CreateSubscription :exec
INSERT INTO subscriptions (user_id, credit_id, plan, price, expires_at, status)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateSubscriptionParams struct {
	UserID    int64     `json:"userId"`
	CreditID  int64     `json:"creditId"`
	Plan      string    `json:"plan"`
	Price     int64     `json:"price"`
	ExpiresAt time.Time `json:"expiresAt"`
	Status    string    `json:"status"`
}

func (q *Queries) CreateSubscription(ctx context.Context, arg *CreateSubscriptionParams) error {
	_, err := q.db.Exec(ctx, createSubscription,
		arg.UserID,
		arg.CreditID,
		arg.Plan,
		arg.Price,
		arg.ExpiresAt,
		arg.Status,
	)
	return err
}

const findCreditByUserID = `-- name: FindCreditByUserID :one
SELECT id, user_id, balance, is_active, created_at, updated_at
FROM credits
WHERE user_id = $1
`

func (q *Queries) FindCreditByUserID(ctx context.Context, userID int64) (*Credit, error) {
	row := q.db.QueryRow(ctx, findCreditByUserID, userID)
	var i Credit
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const findPaymentByTxnID = `-- name: FindPaymentByTxnID :one
SELECT id, user_id, type, gateway, txn_id, amount, status, created_at, updated_at
FROM payments
WHERE txn_id = $1
`

func (q *Queries) FindPaymentByTxnID(ctx context.Context, txnID string) (*Payment, error) {
	row := q.db.QueryRow(ctx, findPaymentByTxnID, txnID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Gateway,
		&i.TxnID,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getPlanByUserID = `-- name: GetPlanByUserID :one
SELECT plan
FROM subscriptions
WHERE user_id = $1
`

func (q *Queries) GetPlanByUserID(ctx context.Context, userID int64) (string, error) {
	row := q.db.QueryRow(ctx, getPlanByUserID, userID)
	var plan string
	err := row.Scan(&plan)
	return plan, err
}

const getSubscriptionByUserID = `-- name: GetSubscriptionByUserID :one
SELECT plan, price, created_at, updated_at, expires_at, status
FROM subscriptions
WHERE user_id = $1
`

type GetSubscriptionByUserIDRow struct {
	Plan      string    `json:"plan"`
	Price     int64     `json:"price"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	ExpiresAt time.Time `json:"expiresAt"`
	Status    string    `json:"status"`
}

func (q *Queries) GetSubscriptionByUserID(ctx context.Context, userID int64) (*GetSubscriptionByUserIDRow, error) {
	row := q.db.QueryRow(ctx, getSubscriptionByUserID, userID)
	var i GetSubscriptionByUserIDRow
	err := row.Scan(
		&i.Plan,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.Status,
	)
	return &i, err
}

const initialisePayment = `-- name: InitialisePayment :exec

INSERT INTO payments (user_id, type, gateway, txn_id, amount, status)
VALUES ($1, $2, $3, $4, $5, $6)
`

type InitialisePaymentParams struct {
	UserID  int64  `json:"userId"`
	Type    string `json:"type"`
	Gateway string `json:"gateway"`
	TxnID   string `json:"txnId"`
	Amount  int64  `json:"amount"`
	Status  string `json:"status"`
}

// queries/payments.sql
func (q *Queries) InitialisePayment(ctx context.Context, arg *InitialisePaymentParams) error {
	_, err := q.db.Exec(ctx, initialisePayment,
		arg.UserID,
		arg.Type,
		arg.Gateway,
		arg.TxnID,
		arg.Amount,
		arg.Status,
	)
	return err
}

const updateCreditBalance = `-- name: UpdateCreditBalance :exec
UPDATE credits
SET balance = balance + $1,
    updated_at = NOW()
WHERE id = $2
`

type UpdateCreditBalanceParams struct {
	Balance int64 `json:"balance"`
	ID      int64 `json:"id"`
}

func (q *Queries) UpdateCreditBalance(ctx context.Context, arg *UpdateCreditBalanceParams) error {
	_, err := q.db.Exec(ctx, updateCreditBalance, arg.Balance, arg.ID)
	return err
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :exec
UPDATE payments
SET status = $1,
    updated_at = NOW()
WHERE id = $2
`

type UpdatePaymentStatusParams struct {
	Status string `json:"status"`
	ID     int64  `json:"id"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg *UpdatePaymentStatusParams) error {
	_, err := q.db.Exec(ctx, updatePaymentStatus, arg.Status, arg.ID)
	return err
}

const updateUserToPremium = `-- name: UpdateUserToPremium :exec
UPDATE users
SET is_premium = true
WHERE id = $1
`

func (q *Queries) UpdateUserToPremium(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateUserToPremium, id)
	return err
}
