// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_auth.sql

package q

import (
	"context"
	"time"
)

const findUserByPasswordResetToken = `-- name: FindUserByPasswordResetToken :one
SELECT u.id,
       u.username,
       u.name,
       u.email,
       ua.password_reset_expires
FROM users u
    JOIN user_auth ua ON u.id = ua.user_id
WHERE ua.password_reset_token = $1
`

type FindUserByPasswordResetTokenRow struct {
	ID                   int64     `json:"id"`
	Username             string    `json:"username"`
	Name                 string    `json:"name"`
	Email                string    `json:"email"`
	PasswordResetExpires time.Time `json:"passwordResetExpires"`
}

func (q *Queries) FindUserByPasswordResetToken(ctx context.Context, passwordResetToken string) (*FindUserByPasswordResetTokenRow, error) {
	row := q.db.QueryRow(ctx, findUserByPasswordResetToken, passwordResetToken)
	var i FindUserByPasswordResetTokenRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Email,
		&i.PasswordResetExpires,
	)
	return &i, err
}

const getActivePasswordResetTokenExpiry = `-- name: GetActivePasswordResetTokenExpiry :one
SELECT password_reset_expires
FROM user_auth
WHERE user_id = $1
  AND password_reset_token IS NOT NULL
`

func (q *Queries) GetActivePasswordResetTokenExpiry(ctx context.Context, userID int64) (time.Time, error) {
	row := q.db.QueryRow(ctx, getActivePasswordResetTokenExpiry, userID)
	var password_reset_expires time.Time
	err := row.Scan(&password_reset_expires)
	return password_reset_expires, err
}

const getPasswordResetTokenExpiry = `-- name: GetPasswordResetTokenExpiry :one
SELECT password_reset_expires
FROM user_auth
WHERE password_reset_token = $1
`

func (q *Queries) GetPasswordResetTokenExpiry(ctx context.Context, passwordResetToken string) (time.Time, error) {
	row := q.db.QueryRow(ctx, getPasswordResetTokenExpiry, passwordResetToken)
	var password_reset_expires time.Time
	err := row.Scan(&password_reset_expires)
	return password_reset_expires, err
}

const removePasswordResetToken = `-- name: RemovePasswordResetToken :exec
UPDATE user_auth
SET password_reset_token = NULL,
    password_reset_expires = NULL
WHERE user_id = $1
`

func (q *Queries) RemovePasswordResetToken(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, removePasswordResetToken, userID)
	return err
}

const savePasswordResetToken = `-- name: SavePasswordResetToken :exec

INSERT INTO user_auth (user_id, username, password_reset_token, password_reset_expires)
VALUES ($1, $2, $3, $4)
ON CONFLICT (user_id) DO UPDATE
SET password_reset_token = $3,
    password_reset_expires = $4
`

type SavePasswordResetTokenParams struct {
	UserID               int64     `json:"userId"`
	Username             string    `json:"username"`
	PasswordResetToken   string    `json:"passwordResetToken"`
	PasswordResetExpires time.Time `json:"passwordResetExpires"`
}

// queries/user_auth.sql
func (q *Queries) SavePasswordResetToken(ctx context.Context, arg *SavePasswordResetTokenParams) error {
	_, err := q.db.Exec(ctx, savePasswordResetToken,
		arg.UserID,
		arg.Username,
		arg.PasswordResetToken,
		arg.PasswordResetExpires,
	)
	return err
}
