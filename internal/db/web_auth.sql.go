// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: web_auth.sql

package q

import (
	"context"
)

const deleteWebAuthnCredential = `-- name: DeleteWebAuthnCredential :exec
DELETE FROM webauthn_credentials
WHERE id = $1
`

func (q *Queries) DeleteWebAuthnCredential(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteWebAuthnCredential, id)
	return err
}

const findWebAuthnCredentialByUserAndCredID = `-- name: FindWebAuthnCredentialByUserAndCredID :one
SELECT id, user_id, username, credential_id, public_key, sign_count, transports, authenticator_aaguid, is_backup, created_at, updated_at
FROM webauthn_credentials
WHERE credential_id = $1 AND user_id=$2
`

type FindWebAuthnCredentialByUserAndCredIDParams struct {
	CredentialID []byte `json:"credentialId"`
	UserID       int64  `json:"userId"`
}

func (q *Queries) FindWebAuthnCredentialByUserAndCredID(ctx context.Context, arg *FindWebAuthnCredentialByUserAndCredIDParams) (*WebauthnCredential, error) {
	row := q.db.QueryRow(ctx, findWebAuthnCredentialByUserAndCredID, arg.CredentialID, arg.UserID)
	var i WebauthnCredential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.CredentialID,
		&i.PublicKey,
		&i.SignCount,
		&i.Transports,
		&i.AuthenticatorAaguid,
		&i.IsBackup,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getWebAuthnCredentialByCredentialID = `-- name: GetWebAuthnCredentialByCredentialID :one
SELECT id, user_id, username, credential_id, public_key, sign_count, transports, authenticator_aaguid, is_backup, created_at, updated_at
FROM webauthn_credentials
WHERE credential_id = $1
`

func (q *Queries) GetWebAuthnCredentialByCredentialID(ctx context.Context, credentialID []byte) (*WebauthnCredential, error) {
	row := q.db.QueryRow(ctx, getWebAuthnCredentialByCredentialID, credentialID)
	var i WebauthnCredential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.CredentialID,
		&i.PublicKey,
		&i.SignCount,
		&i.Transports,
		&i.AuthenticatorAaguid,
		&i.IsBackup,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getWebAuthnCredentialByID = `-- name: GetWebAuthnCredentialByID :one
SELECT id, user_id, username, credential_id, public_key, sign_count, transports, authenticator_aaguid, is_backup, created_at, updated_at
FROM webauthn_credentials
WHERE id = $1
`

func (q *Queries) GetWebAuthnCredentialByID(ctx context.Context, id int64) (*WebauthnCredential, error) {
	row := q.db.QueryRow(ctx, getWebAuthnCredentialByID, id)
	var i WebauthnCredential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.CredentialID,
		&i.PublicKey,
		&i.SignCount,
		&i.Transports,
		&i.AuthenticatorAaguid,
		&i.IsBackup,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const insertWebAuthnCredential = `-- name: InsertWebAuthnCredential :one
INSERT INTO webauthn_credentials (
    user_id,
    username,
    credential_id,
    public_key,
    sign_count,
    transports,
    authenticator_aaguid,
    is_backup
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, user_id, username, credential_id, public_key, sign_count, transports, authenticator_aaguid, is_backup, created_at, updated_at
`

type InsertWebAuthnCredentialParams struct {
	UserID              int64    `json:"userId"`
	Username            string   `json:"username"`
	CredentialID        []byte   `json:"credentialId"`
	PublicKey           []byte   `json:"publicKey"`
	SignCount           int64    `json:"signCount"`
	Transports          []string `json:"transports"`
	AuthenticatorAaguid string   `json:"authenticatorAaguid"`
	IsBackup            bool     `json:"isBackup"`
}

func (q *Queries) InsertWebAuthnCredential(ctx context.Context, arg *InsertWebAuthnCredentialParams) (*WebauthnCredential, error) {
	row := q.db.QueryRow(ctx, insertWebAuthnCredential,
		arg.UserID,
		arg.Username,
		arg.CredentialID,
		arg.PublicKey,
		arg.SignCount,
		arg.Transports,
		arg.AuthenticatorAaguid,
		arg.IsBackup,
	)
	var i WebauthnCredential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.CredentialID,
		&i.PublicKey,
		&i.SignCount,
		&i.Transports,
		&i.AuthenticatorAaguid,
		&i.IsBackup,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listWebAuthnCredentialsByUserID = `-- name: ListWebAuthnCredentialsByUserID :many
SELECT id, user_id, username, credential_id, public_key, sign_count, transports, authenticator_aaguid, is_backup, created_at, updated_at
FROM webauthn_credentials
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListWebAuthnCredentialsByUserID(ctx context.Context, userID int64) ([]*WebauthnCredential, error) {
	rows, err := q.db.Query(ctx, listWebAuthnCredentialsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*WebauthnCredential
	for rows.Next() {
		var i WebauthnCredential
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.CredentialID,
			&i.PublicKey,
			&i.SignCount,
			&i.Transports,
			&i.AuthenticatorAaguid,
			&i.IsBackup,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWebAuthnCredentialsByUsername = `-- name: ListWebAuthnCredentialsByUsername :many
SELECT id, user_id, username, credential_id, public_key, sign_count, transports, authenticator_aaguid, is_backup, created_at, updated_at
FROM webauthn_credentials
WHERE username = $1
ORDER BY created_at DESC
`

func (q *Queries) ListWebAuthnCredentialsByUsername(ctx context.Context, username string) ([]*WebauthnCredential, error) {
	rows, err := q.db.Query(ctx, listWebAuthnCredentialsByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*WebauthnCredential
	for rows.Next() {
		var i WebauthnCredential
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.CredentialID,
			&i.PublicKey,
			&i.SignCount,
			&i.Transports,
			&i.AuthenticatorAaguid,
			&i.IsBackup,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWebAuthnSignCount = `-- name: UpdateWebAuthnSignCount :exec
UPDATE webauthn_credentials
SET sign_count = $2, updated_at = now()
WHERE credential_id = $1
`

type UpdateWebAuthnSignCountParams struct {
	CredentialID []byte `json:"credentialId"`
	SignCount    int64  `json:"signCount"`
}

func (q *Queries) UpdateWebAuthnSignCount(ctx context.Context, arg *UpdateWebAuthnSignCountParams) error {
	_, err := q.db.Exec(ctx, updateWebAuthnSignCount, arg.CredentialID, arg.SignCount)
	return err
}
