// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: destinations.sql

package q

import (
	"context"
)

const createDestination = `-- name: CreateDestination :exec
INSERT INTO destinations (user_id, username, destination_email, domain, cloudflare_destination_id, is_verified)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateDestinationParams struct {
	UserID                  int64  `json:"userId"`
	Username                string `json:"username"`
	DestinationEmail        string `json:"destinationEmail"`
	Domain                  string `json:"domain"`
	CloudflareDestinationID string `json:"cloudflareDestinationId"`
	IsVerified              bool   `json:"isVerified"`
}

func (q *Queries) CreateDestination(ctx context.Context, arg *CreateDestinationParams) error {
	_, err := q.db.Exec(ctx, createDestination,
		arg.UserID,
		arg.Username,
		arg.DestinationEmail,
		arg.Domain,
		arg.CloudflareDestinationID,
		arg.IsVerified,
	)
	return err
}

const decrementUserDestinationCount = `-- name: DecrementUserDestinationCount :exec
UPDATE users
SET destination_count = destination_count - 1
WHERE id = $1
`

func (q *Queries) DecrementUserDestinationCount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, decrementUserDestinationCount, id)
	return err
}

const deleteDestinationByID = `-- name: DeleteDestinationByID :exec
DELETE FROM destinations
WHERE id = $1
`

func (q *Queries) DeleteDestinationByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteDestinationByID, id)
	return err
}

const findDestinationByEmail = `-- name: FindDestinationByEmail :one
SELECT id, user_id, username, destination_email, domain, cloudflare_destination_id, is_verified
FROM destinations
WHERE destination_email = $1
`

type FindDestinationByEmailRow struct {
	ID                      int64  `json:"id"`
	UserID                  int64  `json:"userId"`
	Username                string `json:"username"`
	DestinationEmail        string `json:"destinationEmail"`
	Domain                  string `json:"domain"`
	CloudflareDestinationID string `json:"cloudflareDestinationId"`
	IsVerified              bool   `json:"isVerified"`
}

func (q *Queries) FindDestinationByEmail(ctx context.Context, destinationEmail string) (*FindDestinationByEmailRow, error) {
	row := q.db.QueryRow(ctx, findDestinationByEmail, destinationEmail)
	var i FindDestinationByEmailRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.DestinationEmail,
		&i.Domain,
		&i.CloudflareDestinationID,
		&i.IsVerified,
	)
	return &i, err
}

const findDestinationByEmailAndDomain = `-- name: FindDestinationByEmailAndDomain :one
SELECT id, user_id, username, destination_email, domain, cloudflare_destination_id, is_verified
FROM destinations
WHERE destination_email = $1 AND domain = $2
`

type FindDestinationByEmailAndDomainParams struct {
	DestinationEmail string `json:"destinationEmail"`
	Domain           string `json:"domain"`
}

type FindDestinationByEmailAndDomainRow struct {
	ID                      int64  `json:"id"`
	UserID                  int64  `json:"userId"`
	Username                string `json:"username"`
	DestinationEmail        string `json:"destinationEmail"`
	Domain                  string `json:"domain"`
	CloudflareDestinationID string `json:"cloudflareDestinationId"`
	IsVerified              bool   `json:"isVerified"`
}

func (q *Queries) FindDestinationByEmailAndDomain(ctx context.Context, arg *FindDestinationByEmailAndDomainParams) (*FindDestinationByEmailAndDomainRow, error) {
	row := q.db.QueryRow(ctx, findDestinationByEmailAndDomain, arg.DestinationEmail, arg.Domain)
	var i FindDestinationByEmailAndDomainRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.DestinationEmail,
		&i.Domain,
		&i.CloudflareDestinationID,
		&i.IsVerified,
	)
	return &i, err
}

const findDestinationByEmailAndDomainAndUserID = `-- name: FindDestinationByEmailAndDomainAndUserID :one
SELECT id, user_id, username, destination_email, domain, cloudflare_destination_id, is_verified
FROM destinations
WHERE destination_email = $1 AND domain = $2 AND user_id = $3
`

type FindDestinationByEmailAndDomainAndUserIDParams struct {
	DestinationEmail string `json:"destinationEmail"`
	Domain           string `json:"domain"`
	UserID           int64  `json:"userId"`
}

type FindDestinationByEmailAndDomainAndUserIDRow struct {
	ID                      int64  `json:"id"`
	UserID                  int64  `json:"userId"`
	Username                string `json:"username"`
	DestinationEmail        string `json:"destinationEmail"`
	Domain                  string `json:"domain"`
	CloudflareDestinationID string `json:"cloudflareDestinationId"`
	IsVerified              bool   `json:"isVerified"`
}

func (q *Queries) FindDestinationByEmailAndDomainAndUserID(ctx context.Context, arg *FindDestinationByEmailAndDomainAndUserIDParams) (*FindDestinationByEmailAndDomainAndUserIDRow, error) {
	row := q.db.QueryRow(ctx, findDestinationByEmailAndDomainAndUserID, arg.DestinationEmail, arg.Domain, arg.UserID)
	var i FindDestinationByEmailAndDomainAndUserIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.DestinationEmail,
		&i.Domain,
		&i.CloudflareDestinationID,
		&i.IsVerified,
	)
	return &i, err
}

const findDestinationByEmailAndUsername = `-- name: FindDestinationByEmailAndUsername :one
SELECT id, user_id, username, destination_email, domain, cloudflare_destination_id, is_verified
FROM destinations
WHERE destination_email = $1 AND username = $2
`

type FindDestinationByEmailAndUsernameParams struct {
	DestinationEmail string `json:"destinationEmail"`
	Username         string `json:"username"`
}

type FindDestinationByEmailAndUsernameRow struct {
	ID                      int64  `json:"id"`
	UserID                  int64  `json:"userId"`
	Username                string `json:"username"`
	DestinationEmail        string `json:"destinationEmail"`
	Domain                  string `json:"domain"`
	CloudflareDestinationID string `json:"cloudflareDestinationId"`
	IsVerified              bool   `json:"isVerified"`
}

func (q *Queries) FindDestinationByEmailAndUsername(ctx context.Context, arg *FindDestinationByEmailAndUsernameParams) (*FindDestinationByEmailAndUsernameRow, error) {
	row := q.db.QueryRow(ctx, findDestinationByEmailAndUsername, arg.DestinationEmail, arg.Username)
	var i FindDestinationByEmailAndUsernameRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.DestinationEmail,
		&i.Domain,
		&i.CloudflareDestinationID,
		&i.IsVerified,
	)
	return &i, err
}

const findDestinationByID = `-- name: FindDestinationByID :one

SELECT id as destination_id, username, destination_email, domain, is_verified
FROM destinations
WHERE id = $1
`

type FindDestinationByIDRow struct {
	DestinationID    int64  `json:"destinationId"`
	Username         string `json:"username"`
	DestinationEmail string `json:"destinationEmail"`
	Domain           string `json:"domain"`
	IsVerified       bool   `json:"isVerified"`
}

// queries/destinations.sql
func (q *Queries) FindDestinationByID(ctx context.Context, id int64) (*FindDestinationByIDRow, error) {
	row := q.db.QueryRow(ctx, findDestinationByID, id)
	var i FindDestinationByIDRow
	err := row.Scan(
		&i.DestinationID,
		&i.Username,
		&i.DestinationEmail,
		&i.Domain,
		&i.IsVerified,
	)
	return &i, err
}

const findDestinationsByUserID = `-- name: FindDestinationsByUserID :many
SELECT id as destination_id, username, destination_email, domain, is_verified
FROM destinations
WHERE user_id = $1
`

type FindDestinationsByUserIDRow struct {
	DestinationID    int64  `json:"destinationId"`
	Username         string `json:"username"`
	DestinationEmail string `json:"destinationEmail"`
	Domain           string `json:"domain"`
	IsVerified       bool   `json:"isVerified"`
}

func (q *Queries) FindDestinationsByUserID(ctx context.Context, userID int64) ([]*FindDestinationsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, findDestinationsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*FindDestinationsByUserIDRow
	for rows.Next() {
		var i FindDestinationsByUserIDRow
		if err := rows.Scan(
			&i.DestinationID,
			&i.Username,
			&i.DestinationEmail,
			&i.Domain,
			&i.IsVerified,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCloudflareDestinationID = `-- name: GetCloudflareDestinationID :one
SELECT cloudflare_destination_id,domain,destination_email,is_verified
FROM destinations
where id = $1 and user_id = $2
`

type GetCloudflareDestinationIDParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"userId"`
}

type GetCloudflareDestinationIDRow struct {
	CloudflareDestinationID string `json:"cloudflareDestinationId"`
	Domain                  string `json:"domain"`
	DestinationEmail        string `json:"destinationEmail"`
	IsVerified              bool   `json:"isVerified"`
}

func (q *Queries) GetCloudflareDestinationID(ctx context.Context, arg *GetCloudflareDestinationIDParams) (*GetCloudflareDestinationIDRow, error) {
	row := q.db.QueryRow(ctx, getCloudflareDestinationID, arg.ID, arg.UserID)
	var i GetCloudflareDestinationIDRow
	err := row.Scan(
		&i.CloudflareDestinationID,
		&i.Domain,
		&i.DestinationEmail,
		&i.IsVerified,
	)
	return &i, err
}

const incrementUserDestinationCount = `-- name: IncrementUserDestinationCount :exec
UPDATE users
SET destination_count = destination_count + 1
WHERE id = $1
`

func (q *Queries) IncrementUserDestinationCount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, incrementUserDestinationCount, id)
	return err
}

const updateDestination = `-- name: UpdateDestination :exec
UPDATE destinations
SET username = $2,
    destination_email = $3,
    domain = $4,
    cloudflare_destination_id = $5,
    is_verified = $6
WHERE id = $1
`

type UpdateDestinationParams struct {
	ID                      int64  `json:"id"`
	Username                string `json:"username"`
	DestinationEmail        string `json:"destinationEmail"`
	Domain                  string `json:"domain"`
	CloudflareDestinationID string `json:"cloudflareDestinationId"`
	IsVerified              bool   `json:"isVerified"`
}

func (q *Queries) UpdateDestination(ctx context.Context, arg *UpdateDestinationParams) error {
	_, err := q.db.Exec(ctx, updateDestination,
		arg.ID,
		arg.Username,
		arg.DestinationEmail,
		arg.Domain,
		arg.CloudflareDestinationID,
		arg.IsVerified,
	)
	return err
}

const verifyDestinationByID = `-- name: VerifyDestinationByID :exec
UPDATE destinations
SET is_verified = true
WHERE id = $1
`

func (q *Queries) VerifyDestinationByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, verifyDestinationByID, id)
	return err
}
