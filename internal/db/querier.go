// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package q

import (
	"context"
	"time"
)

type Querier interface {
	CreateCredit(ctx context.Context, arg *CreateCreditParams) (int64, error)
	CreateDestination(ctx context.Context, arg *CreateDestinationParams) error
	CreateNewPasswordResetToken(ctx context.Context, arg *CreateNewPasswordResetTokenParams) error
	CreateNewRule(ctx context.Context, arg *CreateNewRuleParams) error
	// queries/social_profiles.sql
	CreateOrUpdateSocialProfile(ctx context.Context, arg *CreateOrUpdateSocialProfileParams) (*CreateOrUpdateSocialProfileRow, error)
	CreateOrUpdateUser(ctx context.Context, arg *CreateOrUpdateUserParams) (*CreateOrUpdateUserRow, error)
	CreateSubscription(ctx context.Context, arg *CreateSubscriptionParams) error
	// queries/users.sql
	CreateUser(ctx context.Context, arg *CreateUserParams) error
	DecrementUserAliasCount(ctx context.Context, id int64) error
	DecrementUserDestinationCount(ctx context.Context, id int64) error
	DeleteDestinationByID(ctx context.Context, id int64) error
	DeleteRuleByID(ctx context.Context, id int64) error
	DeleteUser(ctx context.Context, id int64) error
	DeleteWebAuthnCredential(ctx context.Context, id int64) error
	FindActiveRulesByDestinationEmail(ctx context.Context, destinationEmail string) ([]*FindActiveRulesByDestinationEmailRow, error)
	FindCreditByUserID(ctx context.Context, userID int64) (*Credit, error)
	FindDestinationByEmail(ctx context.Context, destinationEmail string) (*FindDestinationByEmailRow, error)
	FindDestinationByEmailAndDomain(ctx context.Context, arg *FindDestinationByEmailAndDomainParams) (*FindDestinationByEmailAndDomainRow, error)
	FindDestinationByEmailAndDomainAndUserID(ctx context.Context, arg *FindDestinationByEmailAndDomainAndUserIDParams) (*FindDestinationByEmailAndDomainAndUserIDRow, error)
	FindDestinationByEmailAndUsername(ctx context.Context, arg *FindDestinationByEmailAndUsernameParams) (*FindDestinationByEmailAndUsernameRow, error)
	// queries/destinations.sql
	FindDestinationByID(ctx context.Context, id int64) (*FindDestinationByIDRow, error)
	FindDestinationsByUserID(ctx context.Context, userID int64) ([]*FindDestinationsByUserIDRow, error)
	FindPasswordById(ctx context.Context, id int64) (string, error)
	FindPaymentByTxnID(ctx context.Context, txnID string) (*Payment, error)
	FindRuleByAliasEmail(ctx context.Context, aliasEmail string) (*FindRuleByAliasEmailRow, error)
	// queries/rules.sql
	FindRuleByID(ctx context.Context, id int64) (*FindRuleByIDRow, error)
	FindRulesByDestinationEmail(ctx context.Context, destinationEmail string) ([]*FindRulesByDestinationEmailRow, error)
	FindRulesByUserID(ctx context.Context, userID int64) ([]*FindRulesByUserIDRow, error)
	FindSocialProfileByUserID(ctx context.Context, userID int64) (*FindSocialProfileByUserIDRow, error)
	FindSocialProfileByUsername(ctx context.Context, username string) (*FindSocialProfileByUsernameRow, error)
	FindUserByID(ctx context.Context, id int64) (*FindUserByIDRow, error)
	FindUserByPasswordResetToken(ctx context.Context, passwordResetToken string) (*FindUserByPasswordResetTokenRow, error)
	FindUserByUsername(ctx context.Context, username string) (*FindUserByUsernameRow, error)
	FindUserByUsernameOrEmail(ctx context.Context, arg *FindUserByUsernameOrEmailParams) (*FindUserByUsernameOrEmailRow, error)
	FindUserByValidResetToken(ctx context.Context, passwordResetToken string) (int64, error)
	FindWebAuthnCredentialByUserAndCredID(ctx context.Context, arg *FindWebAuthnCredentialByUserAndCredIDParams) (*WebauthnCredential, error)
	GetActivePasswordResetTokenExpiry(ctx context.Context, userID int64) (time.Time, error)
	GetCloudflareDestinationID(ctx context.Context, arg *GetCloudflareDestinationIDParams) (*GetCloudflareDestinationIDRow, error)
	GetPasswordResetTokenExpiry(ctx context.Context, passwordResetToken string) (time.Time, error)
	GetPlanByUserID(ctx context.Context, userID int64) (string, error)
	GetSubscriptionByUserID(ctx context.Context, userID int64) (*GetSubscriptionByUserIDRow, error)
	GetWebAuthnCredentialByCredentialID(ctx context.Context, credentialID []byte) (*WebauthnCredential, error)
	GetWebAuthnCredentialByID(ctx context.Context, id int64) (*WebauthnCredential, error)
	HasNoActiveResetToken(ctx context.Context, userID int64) (int64, error)
	IncrementUserAliasCount(ctx context.Context, id int64) error
	IncrementUserDestinationCount(ctx context.Context, id int64) error
	// queries/payments.sql
	InitialisePayment(ctx context.Context, arg *InitialisePaymentParams) error
	InsertWebAuthnCredential(ctx context.Context, arg *InsertWebAuthnCredentialParams) (*WebauthnCredential, error)
	ListWebAuthnCredentialsByUserID(ctx context.Context, userID int64) ([]*WebauthnCredential, error)
	ListWebAuthnCredentialsByUsername(ctx context.Context, username string) ([]*WebauthnCredential, error)
	MakeAllRuleInactiveByDestinationEmail(ctx context.Context, destinationEmail string) error
	RemovePasswordResetToken(ctx context.Context, userID int64) error
	// queries/user_auth.sql
	SavePasswordResetToken(ctx context.Context, arg *SavePasswordResetTokenParams) error
	ToggleRuleByID(ctx context.Context, id int64) error
	UpdateCreditBalance(ctx context.Context, arg *UpdateCreditBalanceParams) error
	UpdateDestination(ctx context.Context, arg *UpdateDestinationParams) error
	UpdatePasswordAuth(ctx context.Context, userID int64) error
	UpdatePasswordUser(ctx context.Context, arg *UpdatePasswordUserParams) error
	UpdatePaymentStatus(ctx context.Context, arg *UpdatePaymentStatusParams) error
	UpdateProviderByID(ctx context.Context, arg *UpdateProviderByIDParams) error
	UpdateRuleByID(ctx context.Context, arg *UpdateRuleByIDParams) error
	UpdateUser(ctx context.Context, arg *UpdateUserParams) error
	UpdateUserToPremium(ctx context.Context, id int64) error
	UpdateWebAuthnSignCount(ctx context.Context, arg *UpdateWebAuthnSignCountParams) error
	VerifyDestinationByID(ctx context.Context, id int64) error
	VerifyEmailByID(ctx context.Context, id int64) error
}

var _ Querier = (*Queries)(nil)
