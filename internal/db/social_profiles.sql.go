// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: social_profiles.sql

package q

import (
	"context"
	"time"
)

const createOrUpdateSocialProfile = `-- name: CreateOrUpdateSocialProfile :one

INSERT INTO social_profiles (user_id, username, google, facebook, github, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
ON CONFLICT (user_id) DO UPDATE SET
    google = EXCLUDED.google,
    facebook = EXCLUDED.facebook,
    github = EXCLUDED.github,
    updated_at = EXCLUDED.updated_at
RETURNING id, user_id, username, google, facebook, github, created_at, updated_at
`

type CreateOrUpdateSocialProfileParams struct {
	UserID    int64     `json:"userId"`
	Username  string    `json:"username"`
	Google    string    `json:"google"`
	Facebook  string    `json:"facebook"`
	Github    string    `json:"github"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type CreateOrUpdateSocialProfileRow struct {
	ID        int64     `json:"id"`
	UserID    int64     `json:"userId"`
	Username  string    `json:"username"`
	Google    string    `json:"google"`
	Facebook  string    `json:"facebook"`
	Github    string    `json:"github"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// queries/social_profiles.sql
func (q *Queries) CreateOrUpdateSocialProfile(ctx context.Context, arg *CreateOrUpdateSocialProfileParams) (*CreateOrUpdateSocialProfileRow, error) {
	row := q.db.QueryRow(ctx, createOrUpdateSocialProfile,
		arg.UserID,
		arg.Username,
		arg.Google,
		arg.Facebook,
		arg.Github,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateOrUpdateSocialProfileRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Google,
		&i.Facebook,
		&i.Github,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const findSocialProfileByUserID = `-- name: FindSocialProfileByUserID :one
SELECT id, user_id, username, google, facebook, github, created_at, updated_at
FROM social_profiles
WHERE user_id = $1
`

type FindSocialProfileByUserIDRow struct {
	ID        int64     `json:"id"`
	UserID    int64     `json:"userId"`
	Username  string    `json:"username"`
	Google    string    `json:"google"`
	Facebook  string    `json:"facebook"`
	Github    string    `json:"github"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

func (q *Queries) FindSocialProfileByUserID(ctx context.Context, userID int64) (*FindSocialProfileByUserIDRow, error) {
	row := q.db.QueryRow(ctx, findSocialProfileByUserID, userID)
	var i FindSocialProfileByUserIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Google,
		&i.Facebook,
		&i.Github,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const findSocialProfileByUsername = `-- name: FindSocialProfileByUsername :one
SELECT id, user_id, username, google, facebook, github, created_at, updated_at
FROM social_profiles
WHERE username = $1
`

type FindSocialProfileByUsernameRow struct {
	ID        int64     `json:"id"`
	UserID    int64     `json:"userId"`
	Username  string    `json:"username"`
	Google    string    `json:"google"`
	Facebook  string    `json:"facebook"`
	Github    string    `json:"github"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

func (q *Queries) FindSocialProfileByUsername(ctx context.Context, username string) (*FindSocialProfileByUsernameRow, error) {
	row := q.db.QueryRow(ctx, findSocialProfileByUsername, username)
	var i FindSocialProfileByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Google,
		&i.Facebook,
		&i.Github,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
